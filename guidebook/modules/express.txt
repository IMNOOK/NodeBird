express

1. 웹 애플리케이션
Node.js를 위한 빠르고 개방적인 간결한 웹 프레임워크

프레임워크 vs 라이브러리
Framework(프레임워크)
프레임워크는 뼈대나 기반구조를 뜻하고, 제어의 역전 개념이 적용된 대표적인 기술입니다.  
소프트웨어에서의 프레임워크는 '소프트웨어의 특정 문제를 해결하기 위해서 상호 협력하는 클래스와 인터페이스의 집합' 이라 할 수 있으며, 
완성된 어플리케이션이 아닌 프로그래머가 완성시키는 작업을 해야합니다. 
객체 지향 개발을 하게 되면서 통합성, 일관성의 부족이 발생되는 문제를 해결할 방법중 하나라고 할 수 있습니다.

라이브러리(Library)
라이브러리는 단순 활용가능한 도구들의 집합을 말합니다.
즉, 개발자가 만든 클래스에서 호출하여 사용, 클래스들의 나열로 필요한 클래스를 불러서 사용하는 방식을 취하고 있습니다.

프레임워크와 라이브러리의 차이점

라이브러리와 프레임워크의 차이는 제어 흐름에 대한 주도성이 누구에게/어디에 있는가에 있습니다.
즉, 어플리케이션의 Flow(흐름)를 누가 쥐고 있느냐에 달려 있습니다.
프레임워크는 전체적인 흐름을 스스로가 쥐고 있으며 사용자는 그 안에서 필요한 코드를 짜 넣으며 반면에 
라이브러리는 사용자가 전체적인 흐름을 만들며 라이브러리를 가져다 쓰는 것이라고 할 수 있습니다.

다시 말해, 라이브러리는 라이브러리를 가져다가 사용하고 호출하는 측에 전적으로 주도성이 있으며 
프레임워크는 그 틀안에 이미 제어 흐름에 대한 주도성이 내재(내포)하고 있습니다.
프레임워크는 가져다가 사용한다기보다는 거기에 들어가서 사용한다는 느낌/관점으로 접근할 수 있습니다.

2. API
자유롭게 활용할 수 있는 수 많은 HTTP 유틸리티 메소드 및 미들웨어를 통해 쉽고 빠르게 강력한 API를 작성할 수 있다.

API란 (Application Programming Interface: 응용 프로그래밍 인터페이스)
프로그래밍에서 프로그램을 작성하기 위한 일련의 부(Sub) 프로그램, 프로토콜 등을 정의하여 상호 작용을 하기 위한 인터페이스 사양을 말함.

API는 흔히 function, method 또는 operation 등으로 다양하게 불리는 '소프트웨어 컴포넌트'의 기능, 입력, 출력 
그리고 이에 사용되는 자료형으로 표현된다.
API 자체는 어디까지나 사양(specification)만을 정의하기 때문에 구현(implementation)과는 독립적이다.
이를 실제로 구현한 것은 '라이브러리'라고 부른다.
잘 설계된 API는 프로그램 개발을 보다 쉽게 해준다.

API가 실제 기능 구현체인 라이브러리와 함께 제공되는 경우도 있으며, 이 경우를 SDK(Software Development Kit)라 한다.
SDK는 일반적으로 API, 라이브러리와 함께 프로그램을 개발하는데 필요한 여러 보조 프로그램을 포함한다.

한마디로, API는 소스 코드 수준에서 정의되는 인터페이스라고 할 수 있다.
이와 달리 기계어 이진 바이너리 수준에서 정의되는 이러한 인터페이스는 ABI(Application Binary Interface)라 한다.

예를 들어 명령어 창에 "Hello, world!"라는 문자열을 출력하는 프로그램을 C언어로 작성할 때,
당연히 텍스트로 출력하는 printf API를 사용하여 printf("Hello, world!");라고 작성하게 될 것이며,
이는 윈도우, 리눅스, 유닉스, OS X 모두 동일하게 동작하도록 C언어 API가 보장해 준다.
이 'printf'라는 것은 API를 기반으로 설계된 문법이며 이런 것들이 여러개 쌓여 '라이브러리'가 된다.

API가 없다면 프로그래머는 보다 저수준으로 내려가 컴퓨터 메모리를 직접 건드려야 한다.
메모리 영역부터 내려가 H부터 느낌표까지 문자열 하나하나 문자열 구조체를 만들어 담고,
이를 출력하도록 운영체제에 명령어를 보내야 한다.
운영체제마다 그것을 표시하는 방식이 다른 것은 물론이다.
하지만 API가 있기 때문에 이미 프로그래밍 언어에서 정의된 'printf'를 사용하기만 하면 편리하게 텍스트를 출력할 수 있다.
즉 잘 설계된 '프로그래밍 인터페이스'를 사용하면 환경(플랫폼)이 달라져도 동일한 코드가 동일한 결과를 수행하며,
보다 편리하게 프로그래밍을 할 수 있다. 이것이 API의 존재 목적이다.

REST API와 API 둘다 상호 작용을 위한 인터페이스라는 점에서 동일하다.
차이점은 REST API는 네트워크에서 '데이터'를 받아오기 위한 것이고
프로그램에서 API는 '코드' 나아가 코드뭉치인 라이브러리를 받아오기 위한 것이다.
HTTP Request를 보내서 JSON또는 XML 형식으로 데이터 묶음이 온다면 REST API인 것이고
자신의 코드에 import하여 특정 함수나 메소드를 쓸 수 있다면 API라 보면 된다.
소스코드 단계에서 상호 작용을 하는 일반 API와 달리 RESTful API는 웹을 이용하므로 거의 대부분 웹 프로토콜을 통해 주고 받는다.
마시말해 GET/POST 등의 형태로 필요한 인수를 전달받으면 거기에 맞는 결과값을 JSON/XML 형태로 전송해 준다.
이를 그대로 봐도 되긴 하지만 비전문가가 보면 알 수 없는 텍스트들의 나열으로 보이기 때문에
이쁜 형태로 데이터를 적당히 편집(Front)하여 보지 좋은 형태로 만든다.

3. 성능
Express는 기본적인 웹 애플리케이션 기능으로 구성된 얇은 계층을 제공하여,
Node.js 기능을 모호하게 만들지 않는다.

-----------------------------------------------------------------------------------------------------

안내서

기본 라우팅
라우팅은 URI(경로) 및 특정한 HTTP 요청 메소드인 특정 엔드포인트에 대한 클라이언트 요청에 애플리케이션이 응답하는 방법을 결정하는 것을 말한다.
각 라우트는 하나 이상의 핸들러 함수를 가질 수 있으며, 이러한 함수는 라우트가 일치할 때 실행된다.
라우트 정의에는 다음과 같은 구조가 필요하다.

app.METHOD(PATH, HANDLER)

여기서 app은 express의 인스턴스이다.
METHOD는 HTTP 요청 메소드이다.
PATH는 서버에서의 경로이다.
HANDLER는 라우트가 일치할 때 실행되는 함수이다.

라우트 메소드
app.get
app.post

라우트 경로
app.get('/')
app.get('/about')

라우트 핸들러
app.get('/example/a', function(req, res) {
	res.send('Hello from A!');
})

app.get('/example/b', function(req, res) {
	console.log('the response will be sent by the next function ...');
	next();
}, function (req, res) {
	res.send('Hello from B!');
});

응답 메소드
res.download()		파일이 다운로드되도록 프롬프트합니다.
res.end()			응답 프로세스를 종료합니다.
res.json()			JSON 응답을 전송합니다.
res.jsonp()			JSONP 지원을 통해 JSON 응답을 전송합니다.
res.redirect()		요청의 경로를 재지정합니다.
res.render()		보기 템플리트를 렌더링합니다.
res.send()			다양한 유형의 응답을 전송합니다.
res.sendFile()		파일을 옥텟 스트림의 형태로 전송합니다.
res.sendStatus()	응답 상태 코드를 설정한 후 해당 코드를 문자열로 표현한 내용을 응답 본문으로서 전송합니다.

app.router()
app.router()를 이용하면 라우트 경로에 대하여 체인 가능한 라우트 핸들러를 작성할 수 있다.
app.route('/book')
	.get(function(req, res) {
		res.send("");
	})
	.get(function(req, res) {
		res.send("");
	})
	.get(function(req, res) {
		res.send("");
	})

express.Router
express.Router 클래스를 사용하면 모듈식 마운팅 가능한 핸들러를 작성할 수 있다.
Router 인스턴스는 완전한 미들웨어이자 라우팅 시스템이다.

var express = require('express');
var router = express.Router();

// middleware that is specific to this router
router.use(function timeLog(req, res, next) {
  console.log('Time: ', Date.now());
  next();
});
// define the home page route
router.get('/', function(req, res) {
  res.send('Birds home page');
});
// define the about route
router.get('/about', function(req, res) {
  res.send('About birds');
});

module.exports = router;

이후 앱 내에서 다음과 같이 라우터 모듈을 로드하자.

var birds = require('./birds');
...
app.use('/birds', birds);

앱은 이제 /birds 및 /birds/about에 대한 요청을 처리할 수 있게 되었으며, 해당 라우트에 대한 특정한 미들웨어 함수인 timeLog를 호출할 것입니다.

Express에서 정적 파일 제공

이미지, CSS 파일 및 JavaScript 파일과 같은 정적 파일을 제공하려면 Express의 기본 제공 미들웨어 함수인 express.static을 사용하십시오.

정적 자산이 포함된 디렉토리의 이름을 express.static 미들웨어 함수에 전달하면 파일의 직접적인 제공을 시작할 수 있습니다. 예를 들면, 다음과 같은 코드를 이용하여 public이라는 이름의 디렉토리에 포함된 이미지, CSS 파일 및 JavaScript 파일을 제공하십시오.


app.use(express.static('public'));

이제 다음과 같이 public 디렉토리에 포함된 파일을 로드할 수 있습니다.


http://localhost:3000/images/kitten.jpg
http://localhost:3000/css/style.css
http://localhost:3000/js/app.js
http://localhost:3000/images/bg.png
http://localhost:3000/hello.html

Express는 정적 디렉토리에 대해 상대적으로 파일을 검색하며, 따라서 정적 디렉토리의 이름은 URL의 일부가 아닙니다.
여러 개의 정적 자산 디렉토리를 이용하려면 다음과 같이 express.static 미들웨어 함수를 여러 번 호출하십시오.


app.use(express.static('public'));
app.use(express.static('files'));

Express는 express.static 미들웨어 함수를 이용해 정적 디렉토리를 설정한 순서대로 파일을 검색합니다.

express.static 함수를 통해 제공되는 파일에 대한 가상 경로 접두부(파일 시스템 내에 해당 경로가 실제로 존재하지 않는 경우)를 작성하려면, 아래에 표시된 것과 같이 정적 디렉토리에 대한 마운트 경로를 지정하십시오.


app.use('/static', express.static('public'));

이제 /static 경로 접두부를 통해 public 디렉토리에 포함된 파일을 로드할 수 있습니다.


http://localhost:3000/static/images/kitten.jpg
http://localhost:3000/static/css/style.css
http://localhost:3000/static/js/app.js
http://localhost:3000/static/images/bg.png
http://localhost:3000/static/hello.html

그러나 express.static 함수에 제공되는 경로는 node 프로세스가 실행되는 디렉토리에 대해 상대적입니다. Express 앱을 다른 디렉토리에서 실행하는 경우에는 다음과 같이 제공하기 원하는 디렉토리의 절대 경로를 사용하는 것이 더 안전합니다.


app.use('/static', express.static(__dirname + '/public'));
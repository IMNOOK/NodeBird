app.js
// 다른 사람들이 만든 모듈 불러 옴
const 모듈 = require('모듈');

// 내가 만든 모듈 or 설정 값 가져옴
dotenv.config();
const 라우터 = require('./rotues/라우터');
...
const { sequelize } = require('./models'); || DB 연결 모듈
const passportConfig = require('./passport');

// 코드 시작은 app 설정과 app.set 할 값들, 및 미리 연결할 front 설정, DB 설정
const app = express();
app.set('port', process.env.PORT || 포트);
app.set('view engine', 'html');
nunjucks.configure('views', {
 express: app,
 watch: true,
});
sequelize.sync({ force: false })
 .then (() => {
  console.log('데이터베이스 연결 성공');
 .catch ((err) => {
  console.error(err);
 });

// 미들웨어(모듈) 순서대로 장착
app.use(morgan('dev'));
app.use(express.static(path.join(__dirname, 'public')));
app.use('/img', express.static(path.join(__dirname, 'uploads')));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser(process.env.COOKIE_SECRET));
app.use(session({
    resave: false,
    saveUninitalized: false,
    secret: process.env.COOKIE_SECRET,
    cookie: {
        httpOnly: true,
        secure: false, // 배포시 true
    },
}));
app.use(passport.initialize());
app.use(passport.session());

//라우팅
app.use('/', pageRouter);
...

//에러 처리 미들웨어
app.use((req, res, next) => {
    const error = new Error(`${req.method} ${req.url} 라우터가 없습니다.`);
    error.status = 404;
    next(error);
});

app.use((err, req, res, next) => {
    res.locals.message = err.message;
    res.locals.error = process.env.NODE_ENV !== 'production' ? err : {};
    res.status(err.status || 500);
    res.render('error');
});

//서버 리스링
app.listen(app.get('port'), () => {
    console.log(app.get('port'), '번 포트에서 대기중');
});